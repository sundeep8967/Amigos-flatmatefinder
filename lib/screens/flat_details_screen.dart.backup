import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../models/flat_model.dart';
import '../models/user_model.dart';
import '../providers/auth_provider.dart';
import '../providers/request_provider.dart';
import '../services/auth_service.dart';
import '../widgets/ios_style_button.dart';
import '../widgets/ios_style_form_field.dart';
import 'image_gallery_screen.dart';

class FlatDetailsScreen extends StatefulWidget {
  final FlatModel flat;

  const FlatDetailsScreen({
    super.key,
    required this.flat,
  });

  @override
  State<FlatDetailsScreen> createState() => _FlatDetailsScreenState();
}

class _FlatDetailsScreenState extends State<FlatDetailsScreen> {
  final _messageController = TextEditingController();
  UserModel? _hostUser;
  bool _isLoadingHost = true;
  bool _hasRequested = false;
  bool _isCheckingRequest = true;

  @override
  void initState() {
    super.initState();
    _loadHostInfo();
    _checkExistingRequest();
  }

  @override
  void dispose() {
    _messageController.dispose();
    super.dispose();
  }

  Future<void> _loadHostInfo() async {
    try {
      final authService = AuthService();
      final hostUser = await authService.getUserDocument(widget.flat.hostId);
      if (mounted) {
        setState(() {
          _hostUser = hostUser;
          _isLoadingHost = false;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _isLoadingHost = false;
        });
      }
    }
  }

  Future<void> _checkExistingRequest() async {
    final authProvider = Provider.of<AuthProvider>(context, listen: false);
    final requestProvider = Provider.of<RequestProvider>(context, listen: false);
    
    if (authProvider.user != null) {
      final hasRequested = await requestProvider.hasRequestedForFlat(
        authProvider.user!.uid,
        widget.flat.id!,
      );
      
      if (mounted) {
        setState(() {
          _hasRequested = hasRequested;
          _isCheckingRequest = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: CustomScrollView(
        slivers: [
          // App Bar with Images
          SliverAppBar(
            expandedHeight: 300,
            pinned: true,
            leading: Container(
              margin: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.3),
                borderRadius: BorderRadius.circular(20),
              ),
              child: IconButton(
                icon: const Icon(Icons.chevron_left, size: 28, color: Colors.white),
                onPressed: () => Navigator.of(context).pop(),
              ),
            ),
            actions: [
              Container(
                margin: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.black.withOpacity(0.3),
                  borderRadius: BorderRadius.circular(20),
                ),
                child: IconButton(
                  icon: const Icon(Icons.favorite_outline, color: Colors.white),
                  onPressed: () {
                    // Add to favorites functionality
                  },
                ),
              ),
            ],
            flexibleSpace: FlexibleSpaceBar(
              background: widget.flat.images.isNotEmpty
                  ? GestureDetector(
                      onTap: () => _openImageGallery(0),
                      child: Stack(
                        children: [
                          PageView.builder(
                            itemCount: widget.flat.images.length,
                            itemBuilder: (context, index) {
                              return GestureDetector(
                                onTap: () => _openImageGallery(index),
                                child: Image.network(
                                  widget.flat.images[index],
                                  fit: BoxFit.cover,
                                  errorBuilder: (context, error, stackTrace) {
                                    return Container(
                                      color: Colors.grey.shade300,
                                      child: const Icon(
                                        Icons.image_not_supported,
                                        size: 50,
                                        color: Colors.grey,
                                      ),
                                    );
                                  },
                                ),
                              );
                            },
                          ),
                          if (widget.flat.images.length > 1)
                            Positioned(
                              bottom: 16,
                              right: 16,
                              child: Container(
                                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                                decoration: BoxDecoration(
                                  color: Colors.black.withOpacity(0.7),
                                  borderRadius: BorderRadius.circular(16),
                                ),
                                child: Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    const Icon(Icons.photo_library, color: Colors.white, size: 16),
                                    const SizedBox(width: 4),
                                    Text(
                                      '${widget.flat.images.length}',
                                      style: const TextStyle(color: Colors.white, fontWeight: FontWeight.w600),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                        ],
                      ),
                    )
                  : Container(
                      color: Colors.grey.shade300,
                      child: const Icon(
                        Icons.home,
                        size: 80,
                        color: Colors.grey,
                      ),
                    ),
            ),
          ),
          
          // Content
          SliverToBoxAdapter(
            child: Column(
              children: [
                // Title and Price Section
                Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(20),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        widget.flat.title,
                        style: const TextStyle(
                          fontSize: 28,
                          fontWeight: FontWeight.w700,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Row(
                        children: [
                          Icon(
                            Icons.location_on_outlined,
                            color: const Color(0xFF8E8E93),
                            size: 16,
                          ),
                          const SizedBox(width: 4),
                          Text(
                            widget.flat.location,
                            style: const TextStyle(
                              fontSize: 15,
                              color: Color(0xFF8E8E93),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 12),
                      Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 16,
                          vertical: 8,
                        ),
                        decoration: BoxDecoration(
                          color: const Color(0xFF34C759),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Text(
                          'Rs.${widget.flat.rentPerHead.toStringAsFixed(0)}/month',
                          style: const TextStyle(
                            fontSize: 17,
                            fontWeight: FontWeight.w600,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                
                // Property Details Section
                IOSStyleSection(
                  title: 'Property Details',
                  children: [
                    IOSStyleListTile(
                      leading: Container(
                        width: 32,
                        height: 32,
                        decoration: BoxDecoration(
                          color: const Color(0xFF007AFF),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: const Icon(
                          Icons.home_outlined,
                          color: Colors.white,
                          size: 20,
                        ),
                      ),
                      title: 'Property Type',
                      subtitle: widget.flat.flatType,
                    ),
                    IOSStyleListTile(
                      leading: Container(
                        width: 32,
                        height: 32,
                        decoration: BoxDecoration(
                          color: const Color(0xFF34C759),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: const Icon(
                          Icons.people_outline,
                          color: Colors.white,
                          size: 20,
                        ),
                      ),
                      title: 'Available Spots',
                      subtitle: '${widget.flat.availableSpots} spots available',
                    ),
                    IOSStyleListTile(
                      leading: Container(
                        width: 32,
                        height: 32,
                        decoration: BoxDecoration(
                          color: const Color(0xFFFF9500),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: const Icon(
                          Icons.person_outline,
                          color: Colors.white,
                          size: 20,
                        ),
                      ),
                      title: 'Gender Preference',
                      subtitle: widget.flat.genderPreference,
                    ),
                  ],
                ),
                  
                  const SizedBox(height: 24),
                  
                  // Description
                  const Text(
                    'Description',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    widget.flat.description,
                    style: const TextStyle(
                      fontSize: 16,
                      height: 1.5,
                    ),
                  ),
                  
                  const SizedBox(height: 24),
                  
                  // Amenities
                  if (widget.flat.amenities.isNotEmpty) ...[
                    const Text(
                      'Amenities',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 12),
                    Wrap(
                      spacing: 8,
                      runSpacing: 8,
                      children: widget.flat.amenities.map((amenity) {
                        return Container(
                          padding: const EdgeInsets.symmetric(
                            horizontal: 12,
                            vertical: 6,
                          ),
                          decoration: BoxDecoration(
                            color: Colors.blue.shade50,
                            borderRadius: BorderRadius.circular(16),
                            border: Border.all(color: Colors.blue.shade200),
                          ),
                          child: Text(
                            amenity,
                            style: TextStyle(
                              color: Colors.blue.shade700,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        );
                      }).toList(),
                    ),
                    const SizedBox(height: 24),
                  ],
                  
                  // Host Information
                  const Text(
                    'Host Information',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 12),
                  _buildHostCard(),
                  
                  const SizedBox(height: 100), // Space for bottom button
                    ],
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
      
      // Bottom Action Button
      bottomNavigationBar: _buildBottomActionButton(),
    );
  }

  Widget _buildInfoCard(String title, String value, IconData icon) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          Icon(icon, color: Colors.blue.shade600, size: 24),
          const SizedBox(height: 8),
          Text(
            title,
            style: TextStyle(
              fontSize: 12,
              color: Colors.grey.shade600,
              fontWeight: FontWeight.w500,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            value,
            style: const TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.bold,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildHostCard() {
    if (_isLoadingHost) {
      return const Card(
        child: Padding(
          padding: EdgeInsets.all(16),
          child: Center(child: CircularProgressIndicator()),
        ),
      );
    }

    if (_hostUser == null) {
      return Card(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Text(
            'Host information not available',
            style: TextStyle(color: Colors.grey.shade600),
          ),
        ),
      );
    }

    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          children: [
            CircleAvatar(
              radius: 30,
              backgroundImage: _hostUser!.profilePicture != null
                  ? NetworkImage(_hostUser!.profilePicture!)
                  : null,
              backgroundColor: Colors.blue.shade100,
              child: _hostUser!.profilePicture == null
                  ? Icon(Icons.person, color: Colors.blue.shade600, size: 30)
                  : null,
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    _hostUser!.name ?? 'Host',
                    style: const TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  if (_hostUser!.occupation != null) ...[
                    const SizedBox(height: 4),
                    Text(
                      _hostUser!.occupation!,
                      style: TextStyle(
                        color: Colors.grey.shade600,
                        fontSize: 14,
                      ),
                    ),
                  ],
                  if (_hostUser!.age != null) ...[
                    const SizedBox(height: 4),
                    Text(
                      '${_hostUser!.age} years old',
                      style: TextStyle(
                        color: Colors.grey.shade600,
                        fontSize: 14,
                      ),
                    ),
                  ],
                ],
              ),
            ),
            Icon(
              Icons.verified_user,
              color: Colors.green.shade600,
              size: 24,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildBottomActionButton() {
    final authProvider = Provider.of<AuthProvider>(context);
    final user = authProvider.userModel;
    
    // Don't show button for hosts viewing their own listing
    if (user?.uid == widget.flat.hostId) {
      return const SizedBox.shrink();
    }

    if (_isCheckingRequest) {
      return Container(
        padding: const EdgeInsets.all(20),
        child: const Center(child: CircularProgressIndicator()),
      );
    }

    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.2),
            blurRadius: 10,
            offset: const Offset(0, -5),
          ),
        ],
      ),
      child: SafeArea(
        child: SizedBox(
          width: double.infinity,
          height: 56,
          child: ElevatedButton(
            onPressed: _hasRequested ? null : _showRequestDialog,
            style: ElevatedButton.styleFrom(
              backgroundColor: _hasRequested ? Colors.grey : Colors.blue.shade600,
              foregroundColor: Colors.white,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(28),
              ),
              elevation: 0,
            ),
            child: Text(
              _hasRequested ? 'Request Sent' : 'Request to Join',
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ),
      ),
    );
  }

  void _showRequestDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Request to Join'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Send a request to join "${widget.flat.title}"',
                style: const TextStyle(fontSize: 16),
              ),
              const SizedBox(height: 16),
              TextField(
                controller: _messageController,
                maxLines: 3,
                decoration: const InputDecoration(
                  labelText: 'Message (optional)',
                  hintText: 'Tell the host why you\'d be a great flatmate...',
                  border: OutlineInputBorder(),
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('Cancel'),
            ),
            Consumer<RequestProvider>(
              builder: (context, requestProvider, child) {
                return ElevatedButton(
                  onPressed: requestProvider.isLoading ? null : _sendRequest,
                  child: requestProvider.isLoading
                      ? const SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(strokeWidth: 2),
                        )
                      : const Text('Send Request'),
                );
              },
            ),
          ],
        );
      },
    );
  }

  Future<void> _sendRequest() async {
    final authProvider = Provider.of<AuthProvider>(context, listen: false);
    final requestProvider = Provider.of<RequestProvider>(context, listen: false);
    
    if (authProvider.user == null) return;

    final success = await requestProvider.createRequest(
      flatId: widget.flat.id!,
      seekerId: authProvider.user!.uid,
      hostId: widget.flat.hostId,
      message: _messageController.text.trim().isEmpty 
          ? null 
          : _messageController.text.trim(),
    );

    if (mounted) {
      Navigator.of(context).pop(); // Close dialog
      
      if (success) {
        setState(() {
          _hasRequested = true;
        });
        
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Request sent successfully!'),
            backgroundColor: Colors.green,
          ),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(requestProvider.error ?? 'Failed to send request'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void _openImageGallery(int initialIndex) {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => ImageGalleryScreen(
          images: widget.flat.images,
          initialIndex: initialIndex,
          title: widget.flat.title,
        ),
      ),
    );
  }
}